// Generate Password
/*resource "random_string" "rds_password" {
  length           = 12
  special          = true
  override_special = "*%#@!#$&"
}

// Store Password in SSM Parameter Store
resource "aws_ssm_parameter" "rds_password" {
  name        = var.ssm_password_name
  description = "Master Password for RDS Database"
  type        = "SecureString"
  value       = random_string.rds_password.result
}*/

// Get Password from SSM Parameter Store
/*data "aws_ssm_parameter" "rds_password" {
  name       = var.ssm_password_name
  //depends_on = [aws_ssm_parameter.rds_password]
}*/


// Gitea RDS MariaDB database
resource "aws_db_instance" "app_database" {
  identifier           = "${var.app}-mariadb"
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "MariaDB"
  engine_version       = "10.6.10"
  instance_class       = "db.t2.micro"
  db_name              = "gitea"
  username             = "gitea"
  password             = var.rds_password
  //parameter_group_name = "default.mariadb10.6"
  skip_final_snapshot  = true
  apply_immediately    = true
  publicly_accessible  = false
  db_subnet_group_name = aws_db_subnet_group.app_database.name
  parameter_group_name = aws_db_parameter_group.app_database.name
  //vpc_security_group_ids = [aws_security_group.rds.id]
}

resource "aws_db_subnet_group" "app_database" {
  subnet_ids = var.database_subnets

  tags = {
    Name = "${var.app}-subnet-group"
  }
}

resource "aws_db_parameter_group" "app_database" {
  name   = "${var.app}-parameter-group"
  family = "mariadb10.6"

  parameter {
    name  = "log_connections"
    value = "1"
  }
  parameter {
    name  = "character_set_server"
    value = "utf8mb4"
  }
  parameter {
    name  = "character_set_client"
    value = "utf8mb4"
  }
}

resource "aws_security_group" "app_database" {
  name        = "RDS Database Security Group"
  vpc_id      = aws_default_vpc.default.id # This need to be added since AWS Provider v4.29+ to set VPC id

  dynamic "ingress" {
    for_each = ["80", "443"]
    content {
      from_port   = ingress.value
      to_port     = ingress.value
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }


  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name  = "Web Server SecurityGroup"
    Owner = "Denis Astahov"
  }
}
